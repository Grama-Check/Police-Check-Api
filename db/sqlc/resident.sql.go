// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: resident.sql

package db

import (
	"context"
)

const createResident = `-- name: CreateResident :one
INSERT INTO residents (
    nic,
    fullName,
    rAddress,
    clearance
) VALUES (
    $1, $2, $3, $4
) RETURNING nic, fullname, raddress, clearance
`

type CreateResidentParams struct {
	Nic       string `json:"nic"`
	Fullname  string `json:"fullname"`
	Raddress  string `json:"raddress"`
	Clearance string `json:"clearance"`
}

func (q *Queries) CreateResident(ctx context.Context, arg CreateResidentParams) (Resident, error) {
	row := q.db.QueryRowContext(ctx, createResident,
		arg.Nic,
		arg.Fullname,
		arg.Raddress,
		arg.Clearance,
	)
	var i Resident
	err := row.Scan(
		&i.Nic,
		&i.Fullname,
		&i.Raddress,
		&i.Clearance,
	)
	return i, err
}

const getResident = `-- name: GetResident :one
SELECT nic, fullname, raddress, clearance FROM residents
WHERE nic = $1 LIMIT 1
`

func (q *Queries) GetResident(ctx context.Context, nic string) (Resident, error) {
	row := q.db.QueryRowContext(ctx, getResident, nic)
	var i Resident
	err := row.Scan(
		&i.Nic,
		&i.Fullname,
		&i.Raddress,
		&i.Clearance,
	)
	return i, err
}
